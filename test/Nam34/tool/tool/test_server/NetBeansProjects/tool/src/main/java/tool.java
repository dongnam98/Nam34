
import java.io.BufferedReader;
import java.io.DataOutputStream;
import javax.swing.JOptionPane;
import java.io.IOException;
import java.net.HttpURLConnection;
import java.net.URL;
import java.io.InputStreamReader;
import org.w3c.dom.*;
import javax.xml.parsers.*;
import java.io.*;


/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author namdvd
 */
public class tool extends javax.swing.JFrame {

   
    
    
   

    public tool() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnRequest = new javax.swing.JButton();
        jblVersionOS = new javax.swing.JLabel();
        jTextVersionAPP = new javax.swing.JTextField();
        jblVersionAPP = new javax.swing.JLabel();
        jTextTag = new javax.swing.JTextField();
        jblTag = new javax.swing.JLabel();
        jTextVersionOS = new javax.swing.JTextField();
        jblAppID = new javax.swing.JLabel();
        jTextAppID = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtxOutput = new javax.swing.JTextArea();
        jblOutput = new javax.swing.JLabel();
        btnClear = new javax.swing.JButton();
        jlblPlatform = new javax.swing.JLabel();
        jtxtPlatform = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        btnRequest.setText("Request");
        btnRequest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRequestActionPerformed(evt);
            }
        });

        jblVersionOS.setText("VersionAPP");

        jblVersionAPP.setText("VersionOS");

        jblTag.setText("Tag");

        jblAppID.setText("AppID");

        jtxOutput.setColumns(20);
        jtxOutput.setRows(5);
        jtxOutput.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                jtxOutputAncestorAdded(evt);
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
        });
        jScrollPane1.setViewportView(jtxOutput);

        jblOutput.setText("Output");

        btnClear.setText("Clear");
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });

        jlblPlatform.setText("PlatformOS");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 673, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jblOutput)
                        .addGap(223, 223, 223)
                        .addComponent(btnRequest, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnClear))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jblVersionAPP)
                            .addComponent(jblVersionOS)
                            .addComponent(jlblPlatform))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jTextVersionAPP, javax.swing.GroupLayout.DEFAULT_SIZE, 190, Short.MAX_VALUE)
                            .addComponent(jTextVersionOS)
                            .addComponent(jtxtPlatform))
                        .addGap(84, 84, 84)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jblAppID)
                            .addComponent(jblTag))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextTag)
                            .addComponent(jTextAppID))))
                .addGap(25, 25, 25))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextVersionAPP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jblVersionOS)
                    .addComponent(jTextAppID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jblAppID))
                .addGap(42, 42, 42)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextVersionOS, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jblVersionAPP)
                    .addComponent(jblTag)
                    .addComponent(jTextTag, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(35, 35, 35)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jlblPlatform)
                    .addComponent(jtxtPlatform, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jblOutput)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnClear)
                        .addComponent(btnRequest)))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 319, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(28, Short.MAX_VALUE))
        );

        jblVersionOS.getAccessibleContext().setAccessibleDescription("");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnRequestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRequestActionPerformed
        // TODO add your handling code here:
        
        String versionOS = jTextVersionOS.getText();
        String versionAPP = jTextVersionAPP.getText();
        String appID = jTextAppID.getText();
        String tag = jTextTag.getText();
        String platform = jtxtPlatform.getText();
        
        StringBuilder sb = new StringBuilder();
        
        if (versionOS.equals("")){
            sb.append("VersionOS is not empty \n ");
            
        }
        if (versionAPP.equals("")){
            sb.append("VersionAPP is not empty \n");
            
        }
        if (appID.equals("")){
            sb.append("AppID is not empty \n");
            
        }
        if (tag.equals("")){
            sb.append("Tag is not empty \n");
           
        }
        if (platform.equals("")){
            sb.append("Platform is not empty \n");
           
        }
        if (sb.length()>0){
            JOptionPane.showMessageDialog(this, sb.toString(), "Invalidation", JOptionPane.ERROR_MESSAGE);
            return;
        }
       
       String xml = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>"+
                "<request protocol=\"3.0\" version=\"1.0.0.0\" ismachine=\"1\" sessionid=\"{52C632A0-DF77-4E31-BF5E-3D954DE396E1}\" userid=\"{434EE046-37E2-434E-9736-7681CDAC70EA}\" installsource=\"scheduler\" testsource=\"auto\" requestid=\"{13ECE427-66D3-44FA-AD41-A60C66BA6677}\">"+
                "<os platform=\""+ platform +"\" version=\""+ versionAPP +"\" sp=\"Service Pack 1\" arch=\"x86\" />"+
                "<app appid=\"{"+ appID +"}\" version=\""+ versionOS +"\" nextversion=\"\" lang=\"vi\" brand=\"GGLS\" client=\"OtaClient\" tag=\""+ tag +"\" installage=\"0\">"+
                "<event errorcode=\"0\" eventresult=\"0\" eventtype=\"2\" extracode1=\"0\" /><updatecheck/></app></request>";
        try {
                   
                //request lÃªn server
                String url = "http://20.20.20.51:9090/service/update2 ";
                URL obj = new URL(url);
                HttpURLConnection con = (HttpURLConnection) obj.openConnection();
                con.setRequestMethod("POST");
                con.setRequestProperty("Content-Type","text/xml; charset=utf-8");
                con.setDoOutput(true);
                DataOutputStream wr = new DataOutputStream(con.getOutputStream());
                wr.writeBytes(xml);
                wr.flush();
                wr.close();
                
                 //Äá»c pháº£n há»i vÃ  hiá»n thá» ra mÃ n hÃ¬nh
                 
                
                 
                String responseStatus = con.getResponseMessage();
                
                jtxOutput.append(responseStatus +"\n"); 
                BufferedReader in = new BufferedReader(new InputStreamReader(
                con.getInputStream()));
                String inputLine;
                StringBuffer response = new StringBuffer();
                while ((inputLine = in.readLine()) != null) {
                response.append(inputLine);
                }
                in.close();
               
               
                
                jtxOutput.append("response:" + response.toString() +"\n"); 
                jtxOutput.append("========================================================\n"); 
                
                
                
                //táº¡o file xml
                FileWriter myWriter = new FileWriter("response.xml");
                myWriter.write(response.toString());
                myWriter.close();
              
               
                //paser response           
                DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
                DocumentBuilder builder = factory.newDocumentBuilder();
                
                Document doc = builder.parse(new File( "response.xml" ));
                
                NodeList appid = doc.getElementsByTagName("app");
                if (appid.getLength()==0)
                {
                    jtxOutput.setText("");
                    jtxOutput.append("Version khÃ´ng cÃ³ trÃªn server !" +"\n");  
                }
                else{
                for (int i = 0; i < appid.getLength(); i++)
                {
                   
                     jtxOutput.append("========================================================\n"); 
                
                Node node = appid.item(i);
                if (node.getNodeType() == Node.ELEMENT_NODE)
                {
                    
                    
                    Element eElement = (Element) node;
                     
               
               
                    NodeList updatecheck =  eElement.getElementsByTagName("updatecheck");
                    Element update = (Element) updatecheck.item(0);
                    Element element1 = (Element) update;
                    String updatecheck_status = element1.getAttribute("status");
                   
                    jtxOutput.append("Updatecheck status : " + updatecheck_status +"\n"); 
                
                if ("ok".contains(updatecheck_status))
                {
                    
                       NodeList nameVersion = eElement.getElementsByTagName("manifest");
                       Element nameVersions = (Element) nameVersion.item(0);
                       Element element7 = (Element) nameVersions;
                       String nameV = element7.getAttribute("version") ; 
                    
                       jtxOutput.append("Version : " + nameV + "\n"); 
                      
                       
                       NodeList urldowload =eElement.getElementsByTagName("url");
                       Element urls = (Element) urldowload.item(0);
                       Element element2 = (Element) urls;
                       String codebase = element2.getAttribute("codebase") ; 

                       NodeList name = eElement.getElementsByTagName("package");
                       Element namee = (Element) name.item(0);
                       Element element3 = (Element) namee;
                       String name_package = element3.getAttribute("name") ;  

                       String url_dowload = codebase + name_package;
                 
                       jtxOutput.append("Url_dowload : " + url_dowload + "\n"); 
                       


                       NodeList action = eElement.getElementsByTagName("action");

                       Element action1 = (Element) action.item(0);
                       Element element4 = (Element) action1;
                       String update_message_V = element4.getAttribute("update_message");
               
                       jtxOutput.append("Update_message_V : " + update_message_V + "\n"); 
                       

                       Element action2 = (Element) action.item(1);
                       Element element5 = (Element) action2;
                        String update_message_E = element5.getAttribute("update_message");
      
                       jtxOutput.append("Update_message_E : " + update_message_E + "\n"); 
                     

                       Element action3 = (Element) action.item(2);
                       Element element6 = (Element) action3;
                       String internal = element6.getAttribute("internal");
             
                       jtxOutput.append("Internal : " + internal + "\n" ); 
             
                   
                }
                
                else
                {
                    
                    NodeList event = eElement.getElementsByTagName("event");
                    Element eventt = (Element) event.item(0);
                    Element element = (Element) eventt;
                    String event_status = element.getAttribute("status");
       
                    jtxOutput.append("Event status : " + event_status + "\n"); 
                          
                }
              }
                }
                } 
            } 
        catch (Exception e) 
        {
                System.out.println(e);
                JOptionPane.showMessageDialog(this,"Bad Request" , "Invalidation", JOptionPane.ERROR_MESSAGE);
                return;
        }
       
       
       
            
    }//GEN-LAST:event_btnRequestActionPerformed

    private void jtxOutputAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_jtxOutputAncestorAdded
        // TODO add your handling code here:
    }//GEN-LAST:event_jtxOutputAncestorAdded

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        // TODO add your handling code here:
        jtxOutput.setText("");
        
    }//GEN-LAST:event_btnClearActionPerformed

    /**
     * @param args the command line arguments
     * @throws java.io.IOException
     */
    public static void main(String args[]) throws IOException 
    {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(tool.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(tool.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(tool.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(tool.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
       
      
        
        
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new tool().setVisible(true);
            }
        });
    }
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnRequest;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTextAppID;
    private javax.swing.JTextField jTextTag;
    private javax.swing.JTextField jTextVersionAPP;
    private javax.swing.JTextField jTextVersionOS;
    private javax.swing.JLabel jblAppID;
    private javax.swing.JLabel jblOutput;
    private javax.swing.JLabel jblTag;
    private javax.swing.JLabel jblVersionAPP;
    private javax.swing.JLabel jblVersionOS;
    private javax.swing.JLabel jlblPlatform;
    private javax.swing.JTextArea jtxOutput;
    private javax.swing.JTextField jtxtPlatform;
    // End of variables declaration//GEN-END:variables
}
